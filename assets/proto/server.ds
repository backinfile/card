
root struct Root {
}

//----------------------------------------
// 服务器信息
//----------------------------------------

struct DServer {
	DPlayer[] onlinePlayerList;
	DRoom[] roomList;
	DRoom myRoom;
}

struct DPlayer {
	String token;
	String name;
	String roomToken;
	EPlayerState state;
}

enum EPlayerState {
	Normal;
	Game;
}

struct DRoom {
	String token;
	ERoomStage state;
	bool hide;
	DPlayer[] battlePlayers;
	DPlayer[] visitPlayers;
}

enum ERoomStage {
	Normal,
	Battle,
}

struct DClientPlayerInfo {
	String token;
	String name;
}


//----------------------------------------
// 棋盘基本信息
//----------------------------------------

// 棋盘初始化信息 第一次进入游戏
struct DBoardSetup {
	String viewAt; // 主视角玩家token
	DBoardData data;
	DCardInfoList cardInfos;
}

// 棋盘上卡牌以外的信息 sc
struct DBoardData {
	String curTurnPlayer; // 当前回合玩家
	String curActionPlayer; // 当前行动玩家
	int actionPoint; // 当前行动点
}

// 玩家初始化信息 cs
struct DHumanInit {
	String controllerToken;
	String heroCard;
	DStartPileDataPair[] pile;
}

// 卡牌更新或移动
struct DCardInfoList {
	DCardInfo[] cards;
}

// 卡牌更新或移动
struct DCardInfo {
	String sn; // 卡牌sn
	long id;
	DCardPileInfo pileInfo;
}

// 一张卡所在的位置
struct DCardPileInfo {
	String playerToken; // 拥有者token
	ECardPileType pileType; // 牌库类型
	ESlotType slotType; // 储备区牌类型
	bool asPlanSlot; // 当前slot是计划区
	bool ready; // 当前slot已经准备完成
	int pileIndex; // 处于牌堆中的那个位置 0为最底部
	int pileSize; // 牌堆中牌的总数
}


enum ECardPileType {
	None,
	HandPile, // 手牌
	DrawPile, // 牌库
	DiscardPile, // 弃牌区
	TrashPile, // 废弃牌区
	MarkPile, // 标记牌
	SlotPile, // 储备牌区
	HeroPile, // 英雄牌区
}

enum ESlotType {
	None,
	Store, // 储备牌
	Seal, // 封印牌
	Ride, // 骑乘牌
	Harass, // 骚扰牌
	Charge, // 充能牌
	Plan, // 计划牌
}

//----------------------------------------
// 棋盘内交互信息
//----------------------------------------

// 需求Player执行选择操作
struct DTargetInfo {
	ETargetType type;
	int minNumber; // 最少需求数量
	int maxNumber; // 最大需求数量 -1表示任意数量
	String tip; // 提示
	long[] exceptCards;
	DTargetCardInfo[] targetCardInfos; // type==CardPile时启用
	ETargetSlotAimType slotAimType;
}

enum ETargetType {
	None, // 只需确认
	Confirm, // 确认/取消
	CardPile, // 需求n张存在的牌
	EmptySlot, // 空白储备位
	EmptySlotExceptionPlan, // 非计划区空白储备位
}

enum ETargetSlotAimType {
	Occupy, // 侵占
	Store, // 储备
}

// 卡所在的位置
struct DTargetCardInfo {
	String playerToken; // 拥有者token
	ECardPileType pileType; // 牌库类型
	ESlotType slotType; // 储备区牌类型
	bool onlyReady; // 是否限定储备完成的牌
	bool exceptPlan; // 是否排除计划牌
}

// 选择操作返回
struct DTargetSelect {
	bool confirm; // 确认与否
	long[] selectedCard;
	int slotIndex;
}

// 可使用的主动技能
struct DSkillInfos {
	DSkillInfo[] skillInfos;
}

struct DSkillInfo {
	String sn; // 技能sn
	long skillId; // 技能id
	long ownerId; // 卡牌id -1表示非卡牌skill
}

// 使用skill
struct DActiveSkill {
	long skillId;
	DTargetSelect targetSelect;
}

//----------------------------------------
// 其他
//----------------------------------------

struct CSCreateRoom {
}
struct CSJoinRoom {
}

// 仅用于存数据
struct DBoardInit {
	long seed;
	DHumanInit[] humanInits;
}

struct DHumanInit {
	String controllerToken;
	String heroCard;
	DStartPileDataPair[] pile;
}

struct DStartPileDataPair {
	String card;
	int count;
}

struct DHumanOper {
	EOperType type;
	long skillId;
}

enum EOperType {
	None,
	Skill,
}



