
root struct Root {
}

//----------------------------------------
// 服务器信息
//----------------------------------------

struct DServer {
	DPlayer[] onlinePlayerList;
	DRoom[] roomList;
	DRoom myRoom;
}

struct DPlayer {
	String token;
	String name;
	String roomToken;
	EPlayerState state;
}

enum EPlayerState {
	Normal;
	Game;
}

struct DRoom {
	String token;
	ERoomStage state;
	bool hide;
	DPlayer[] battlePlayers;
	DPlayer[] visitPlayers;
}

enum ERoomStage {
	Normal,
	Battle,
}

struct DClientPlayerInfo {
	String token;
	String name;
}


//----------------------------------------
// 棋盘基本信息
//----------------------------------------

// 棋盘初始化信息 第一次进入游戏
struct DBoardSetup {
	DCardInfoList cardInfos;
}

// 棋盘上卡牌以外的信息 sc
struct DBoardData {
	String opponentPlayerName;
	String curTurnPlayerName; // 当前回合玩家名字
	String curActionPlayerName; // 当前行动玩家名字
	int actionPoint; // 当前行动点
	DPileNumber[] pileNumbers;
}

struct DPileNumber {
	ECardPileType pileType;
	bool opponent;
	int number;
}

// 卡牌更新或移动
struct DCardInfoList {
	DBoardData data;
	DCardInfo[] cards;
}

// 卡牌更新或移动
struct DCardInfo {
	String sn; // 卡牌sn
	long id;
	DCardPileInfo pileInfo;
}

// 一张卡所在的位置
struct DCardPileInfo {
	String playerToken; // 拥有者token
	ECardPileType pileType; // 牌库类型
	ESlotType slotType; // 储备区牌类型
	bool asPlanSlot; // 当前slot是计划区
	bool ready; // 当前slot已经准备完成
	int slotIndex; // 第几个储备位
	int pileIndex; // 处于牌堆中的那个位置 0为最底部
	int pileSize; // 牌堆中牌的总数
}


enum ECardPileType {
	None,
	HandPile, // 手牌
	DrawPile, // 牌库
	DiscardPile, // 弃牌区
	TrashPile, // 废弃牌区
	MarkPile, // 标记牌
	SlotPile, // 储备牌区
	HeroPile, // 英雄牌区
	ThreatenPile, // 威慑牌区
}

enum ESlotType {
	None,
	Store, // 储备牌
	Seal, // 封印牌
	Ride, // 骑乘牌
	Harass, // 骚扰牌
	Charge, // 充能牌
	Plan, // 计划牌
}

//----------------------------------------
// 棋盘内交互信息
//----------------------------------------

// 工具卡牌的类型
enum ETargetSlotAimType {
	None,
	Occupy, // 侵占
	Store, // 储备
}

// 选择操作返回
struct DTargetSelect {
	bool confirm; // 确认与否
	long[] selectedCard; // 选择的卡牌id
	int[] slotIndex; // 选择的储备位
}

// 技能信息
struct DSkillInfo {
	String sn; // 技能sn
	long skillId; // 技能id
	long ownerId; // 卡牌id -1表示非卡牌skill
	String tip;
}

// 通知客户端可以选择其中一张卡牌
struct SCSelectCards {
	long[] cardIds;
	bool cancel; // 可以取消
	String tip;
	String cancelTip; // 取消按钮文字
}
// 客户端选择一张卡牌
struct CSSelectCard {
	long cardId; // 0表示取消 >0表示选择的卡
}

// 通知客户端选择一项技能触发
struct SCSelectSkillToActive {
	DSkillInfo[] skillInfos;
	String tip;
}
struct CSSelectSkillToActive {
	long skillId;
}

// 通知客户端选择一处空储备位
struct SCSelectEmptySlot {
	ETargetSlotAimType aimType;
	int[] selectFrom;
	bool opponent;
	String tip;
}
struct CSSelectEmptySlot {
	int selected;
}

// 通知客户端进行确认
struct SCSelectConfirm {
	bool optional; // 是否可以取消
	String tip;
}
struct CSSelectConfirm {
	bool confirm; // 确认
}

//----------------------------------------
// 其他
//----------------------------------------

struct CSCreateRoom {
}
struct CSJoinRoom {
}

// 仅用于存数据
struct DBoardInit {
	long seed;
	DHumanInit[] humanInits;
}

struct DHumanInit {
	String controllerToken;
	String playerName;
	String heroCard;
	DStartPileDataPair[] pile;
}

struct DStartPileDataPair {
	String card;
	int count;
}

struct DHumanOper {
	EOperType type;
	long skillId;
}

enum EOperType {
	None,
	Skill,
}



